#include<iostream>
#include<vector>
#include<string>
#include<cstdio>
#include<algorithm>
#include<iomanip>
#include<cmath>

using namespace std;

typedef unsigned long long ll;
typedef string ls;
typedef vector <ll> x;
const char line = '\n';
const ll n = 10000;
const ll mx=1e6+1;
const ll N = 9;

bool usedInRow(ll grid[N][N], ll row, ll number) {
    for (auto col = 0; col < N; col++)
        if (grid[row][col] == number)
        {
            return true;
            break;
        }
    return false;
}

bool usedInCol(ll grid[N][N], ll col, ll number) {
    for (auto row = 0; row < N; row++)
        if (grid[row][col] == number){
            return true;
            break;
        }

    return false;
}

bool usedInBox(ll grid[N][N], ll row, ll col, ll number) {
    ll boxStartRow = (row - row % 3);
    ll boxStartCol = (col - col % 3);
    for (ll ii = 0; ii < 3; ii++)
        for (ll jj = 0; jj < 3; jj++)
            if (grid[boxStartRow + ii][boxStartCol + jj] == number)
                return true;
    return false;
}


bool isValid(ll grid[N][N], ll row, ll col, ll number) {
    return !usedInRow(grid, row, number) &&
           !usedInCol(grid, col, number) &&
           !usedInBox(grid, row, col, number);
}

bool findUnassignedLocation(ll grid[N][N], ll &row, ll &col) {
    for (row = 0; row < N; row++)
        for (col = 0; col < N; col++)
            if (grid[row][col] == 0)
            {
                return true;
                break;
                }
    return false;
}

bool solveSudoku(ll grid[N][N]) {
    ll row, col;

    if (!findUnassignedLocation(grid, row, col))
        return true;

    for (ll number = 1; number <= 9; number++) {
        if (isValid(grid, row, col, number)) {
            grid[row][col] = number;
            if (solveSudoku(grid))
                return true;
            grid[row][col] = 0;
        }
    }
    return false;
}

void displayGrid(ll grid[N][N]) {
    for (ll row = 0; row < N; row++) {
        for (ll col = 0; col < N; col++)
            cout << grid[row][col] << " ";
        cout << endl;
    }
}

int main() {
    ll grid[N][N];

    cout << "Enter the Sudoku grid (Use 0 for empty cells): " << endl;
    for (ll i = 0; i < N; i++) {
        for (ll j = 0; j < N; j++) {
            cin >> grid[i][j];
        }
    }
    cout << endl;

    if (solveSudoku(grid) == true) {
        cout << "Solution: " << endl;
        displayGrid(grid);
    } else {
        cout << "No solution exists. " << endl;
        cout << "Are you sure you entered it correctly?" << endl;
    }

    return 0;
}
